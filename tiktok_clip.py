import subprocess
import re 
from yt_dlp import YoutubeDL

def download_video(url, output_path='video.mp4'):
    ydl_opts = {
        'format': 'best[height<=1080]/best',  # Meilleure qualit√© jusqu'√† 1080p
        'outtmpl': output_path,
        'quiet': True,
        # Options pour pr√©server la qualit√©
        'writesubtitles': False,
        'writeautomaticsub': False,
        'ignoreerrors': True,
    }
    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])
    print(f"Vid√©o haute qualit√© t√©l√©charg√©e: {output_path}")

def analyze_audio_peaks(video_file, segment_duration=10, min_gap=5):
    """
    Analyse la vid√©o par segments pour trouver les moments les plus forts
    segment_duration: dur√©e de chaque segment analys√© (en secondes)
    min_gap: √©cart minimum entre deux moments d√©tect√©s (en secondes)
    """
    # D'abord, obtenir la dur√©e totale de la vid√©o
    cmd = [
        'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
        '-of', 'default=noprint_wrappers=1:nokey=1', video_file
    ]
    result = subprocess.run(cmd, capture_output=True, text=True)
    try:
        total_duration = float(result.stdout.strip())
    except:
        print("Impossible de d√©terminer la dur√©e de la vid√©o, utilisation de 300s par d√©faut")
        total_duration = 300
    
    print(f"Dur√©e totale de la vid√©o: {total_duration:.1f} secondes")
    
    # Analyser chaque segment
    segments = []
    current_time = 0
    
    while current_time < total_duration:
        # Analyser le volume RMS de ce segment
        cmd = [
            'ffmpeg', '-ss', str(current_time), '-i', video_file,
            '-t', str(segment_duration), '-af', 'volumedetect',
            '-f', 'null', '-'
        ]
        result = subprocess.run(cmd, stderr=subprocess.PIPE, text=True)
        
        # Extraire le niveau RMS moyen
        rms_level = -60  # valeur par d√©faut (tr√®s faible)
        for line in result.stderr.split('\n'):
            if 'mean_volume:' in line:
                try:
                    rms_level = float(line.split('mean_volume:')[1].split('dB')[0].strip())
                except:
                    pass
        
        segments.append({
            'start_time': current_time,
            'rms_level': rms_level,
            'end_time': min(current_time + segment_duration, total_duration)
        })
        
        current_time += segment_duration
        print(f"Analys√©: {current_time:.1f}s/{total_duration:.1f}s", end='\r')
    
    print()  # nouvelle ligne
    
    # Trier par niveau de volume (du plus fort au plus faible)
    segments.sort(key=lambda x: x['rms_level'], reverse=True)
    
    # S√©lectionner les meilleurs moments en √©vitant les chevauchements
    best_moments = []
    for segment in segments:
        # V√©rifier qu'il n'y a pas de chevauchement avec les moments d√©j√† s√©lectionn√©s
        overlap = False
        for existing in best_moments:
            if (abs(segment['start_time'] - existing['start_time']) < min_gap):
                overlap = True
                break
        
        if not overlap and segment['rms_level'] > -40:  # Seuil de volume minimum
            best_moments.append(segment)
            
        # Limiter √† 5 meilleurs moments
        if len(best_moments) >= 5:
            break
    
    # Trier les moments s√©lectionn√©s par ordre chronologique
    best_moments.sort(key=lambda x: x['start_time'])
    
    return best_moments

def find_best_moments(video_file):
    """Trouve automatiquement les meilleurs moments de la vid√©o"""
    print("üîç Analyse de la vid√©o en cours...")
    best_moments = analyze_audio_peaks(video_file)
    
    if not best_moments:
        print("‚ö†Ô∏è Aucun moment fort d√©tect√©, utilisation du d√©but de la vid√©o")
        return [{'start_time': 0, 'rms_level': -30}]
    
    print(f"‚úì {len(best_moments)} moment(s) fort(s) d√©tect√©(s):")
    for i, moment in enumerate(best_moments, 1):
        minutes = int(moment['start_time'] // 60)
        seconds = int(moment['start_time'] % 60)
        print(f"  {i}. {minutes:02d}:{seconds:02d} (niveau: {moment['rms_level']:.1f}dB)")
    
    return best_moments

def cut_clip(input_file, start_time, duration, output_file='clip.mp4'):
    cmd = [
        'ffmpeg',
        '-ss', str(start_time),
        '-i', input_file,
        '-t', str(duration),
        # Am√©lioration de la qualit√© vid√©o
        '-vf', 'scale=720:1280:flags=lanczos,setsar=1',  # Meilleur algorithme de redimensionnement
        '-c:v', 'libx264',           # Codec vid√©o de haute qualit√©
        '-preset', 'slow',           # Preset pour meilleure qualit√© (plus lent mais meilleur)
        '-crf', '18',               # Facteur de qualit√© constant (18 = tr√®s haute qualit√©)
        '-profile:v', 'high',        # Profil H.264 haute qualit√©
        '-level:v', '4.1',          # Niveau de compatibilit√©
        '-pix_fmt', 'yuv420p',      # Format de pixel compatible
        # Am√©lioration de l'audio
        '-c:a', 'aac',              # Codec audio de qualit√©
        '-b:a', '128k',             # Bitrate audio √©lev√©
        '-ar', '44100',             # Fr√©quence d'√©chantillonnage standard
        '-ac', '2',                 # St√©r√©o
        # Options g√©n√©rales
        '-movflags', '+faststart',   # Optimisation pour streaming
        '-y',                       # Remplacer le fichier de sortie
        output_file
    ]
    subprocess.run(cmd, check=True)
    print(f"Clip haute qualit√© sauvegard√©: {output_file}")

if __name__ == "__main__":
    # T√©l√©charger la vid√©o une seule fois
    url = input("Lien YouTube: ")
    video_filename = 'video.mp4'
    download_video(url, video_filename)
    
    # Analyser automatiquement la vid√©o pour trouver les meilleurs moments
    best_moments = find_best_moments(video_filename)
    
    # Demander la dur√©e des clips
    duration = float(input("\nDur√©e de chaque clip en secondes: "))
    
    # Demander combien de clips g√©n√©rer
    max_clips = min(len(best_moments), int(input(f"Combien de clips g√©n√©rer? (max {len(best_moments)}): ")))
    
    print(f"\nüé¨ G√©n√©ration de {max_clips} clip(s)...")
    
    # G√©n√©rer automatiquement les clips pour les meilleurs moments
    for i in range(max_clips):
        moment = best_moments[i]
        start_time = moment['start_time']
        clip_filename = f'clip_{i+1}.mp4'
        
        try:
            minutes = int(start_time // 60)
            seconds = int(start_time % 60)
            print(f"\nüìπ Clip {i+1}: d√©but √† {minutes:02d}:{seconds:02d}")
            cut_clip(video_filename, start_time, duration, clip_filename)
            print(f"‚úì Clip {i+1} g√©n√©r√© avec succ√®s!")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration du clip {i+1}: {e}")
    
    print(f"\nüéâ Termin√©! {max_clips} clip(s) g√©n√©r√©(s) automatiquement √† partir des meilleurs moments.")
